
// Overall popularity
def_feature overall_popularity(p: Pattern) {
	val ct = counter(pattern)
	def score = {
		id => ct(id) / ct()
	}
}

def_feature overall_popularity(ct: counter) {
	def score = {
		id => ct(id) / ct()
	}
}

add_feature(overall_popularity(counter("[ProductViewEvent")))

add_feature(overall_popularity("[ProductViewEvent]"))


// is this message a response? Within time period T


def_feature is_message_response {
	val messages = windowed_set(MessageEvent => (m.sender, m.recipient), "24 hours")
	def apply(checkMsg: MessageEvent): Boolean = {
		messages.contains(checkMsg.recipient, checkMsg.sender)
	}
}

def_feature is_message_response {
	def apply(checkMsg: MessageEvent): Boolean = {
	select ct > 0 from (
		select count(*) from messages m where
			m.sender = checkMsg.recipient and
			m.recipient = checkMsg.sender
			and ts > checkMsg.ts - interval '24' hour and ts < ...)
	}
}


when
	m1: message(sender = a, recipient = b, t)
	m2: message(recipient = b, sender = a, t < t + "24 hours")
then
	emit message_response(message = m2, in_response_to = m1)

Counter {
	p = {
		m1: message(sender = a, recipient = b, t)
		m2: message(recipient = b, sender = a, t < t + "24 hours")
	}

}

// Count fraction of messages sent in response

def_feature recent_response_sent_frac {
	def apply(m: MessageEvent) = {
		val t = interval(m.t-"24 hours", m.t)
		count(message_response(sender=m.sender_id), t) / count(message(sender=m.sender_id), t)
	}
}

val msg_response_ct = windowed_counter(m: MessageEvent => if (is_message_response(m)) Some(m.sender_id) else None , "24 hours")
val msg_sent_ct = windowed_counter(m: MessageEvent => m.sender_id, "24 hours")

def_feature recent_response_sent_frac {
	def apply(m: MessageEvent) = {
		msg_response_ct(m.sender_id) / msg_sent_ct(m.sender_id)
	}
}


def_feature recent_response_sent_frac {
	def apply(m: MessageEvent) = {
		val t = interval(m.t-"24 hours", m.t)
		count(message_response(sender=m.sender_id), t) / count(message(sender=m.sender_id), t)
	}
}

// spam examples
def frac(x: base, p: predicate) = {
	count(x.filter(p)) / count(b)
}

def is_response(m: MessageEvent) {
	exists MessageEvent(sender=m.recipient, recipient = m.sender, ts in m.ts.'interval previous 24 hours')
}

addFeature(frac(MessageEvent in last 7 days, is_response))
addFeature($id => frac(MessageEvent(sender=$id, in last 7 days), is_response)
addFeature(frac(MessageEvent in last 7 days, in last 24 hours))

// how many of the messages sent in the past 7 days have received responses
addFeature($id => frac(MessageEvent(sender=$id, in last 7 days), received_response))
def received_response(m: MessageEvent) {
	exists MessageEvent(sender=m.recipient, recipient = m.sender,  ts > m.ts and ts < now)
}

// print all messages sent by id 1
addEmitter(MessageEvent(id = 1), println(_))
addEmitter(MessageEvent(id = 1).map(e=>println(e)))




// Best Buy

// overall popularity
addFeature overallPopularity ($id => frac(ProductView, _.sku == $id))

addFeature(overallPopularity ($id => frac(MakePattern(classOf[ProductView]), _.sku == $id))

def frac[MatchType](x: BasePattern[MatchType], predicate: MatchType => Boolean) = {
	count(x.filter(predicate)) / count(b)
}



addFeature(frac(MessageEvent in last 7 days, is_response))
addFeature($id => frac(MessageEvent(sender=$id, in last 7 days), is_response)
addFeature(frac(MessageEvent in last 7 days, in last 24 hours))

// how many of the messages sent in the past 7 days have received responses
addFeature($id => frac(MessageEvent(sender=$id, in last 7 days), received_response))
def received_response(m: MessageEvent) {
	exists MessageEvent(sender=m.recipient, recipient = m.sender,  ts > m.ts and ts < now)
}

addFeature(frac(MessageEvent in last 7 days, is_response))


object Exists {
	def apply
}

def isResponse(m1: MessageEvent) = {
	Exists(SingleEventPatternSpec(classOf[MessageEvent], m2 => m2.sender=m1.recipient && m2.recipient = m1.sender, ts in m.ts.'interval previous 24 hours'))
}

class ParametrizedPatternSpec[T] {
	def matches()
}

def fracSentInResponse7Days(id: Long) = {
	frac(RCFromPattern(MessageEvent in last 7 days), isResponse)
}

class TimeFilteredRC extends RC[T]


addFeature(overallPopularity ($id => frac(MakePattern(classOf[ProductView]), _.sku == $id))

addFeature("overallPopularity" ($id => frac(MakeRCFromPattern(classOf[ProductView]), pv: ProductView => pv.sku == $id))

def overallPopularity(id: Long) = {
	frac(RCFromPattern(SingleEventPatternSpec(classOf[ProductView])), pv: ProductView => pv.sku == $id))	
}

val frac = defFeature {
	
}

val overallPopularity = defFeature {
	val f: Long=>Double = frac(RCFromPattern(SingleEventPatternSpec(classOf[ProductView])), pv: ProductView => pv.sku == $id))
	f
}

trait PatternExecutable {
	update(e: Event) 
}


class PatternRC[T](parent: RC, ps: PatternSpec) extends RC[T] {
	def call(e: Event, addOrRemove) = {
		// when matches call registered
	}
}


object RCFromPattern[T] {
	private def getOrCreate(p: PatternSpec): RC[T] {
		// if exists...
		// if not exists
		val rc = new PatternRC(parent = globalEventStream, pattern = ps)
	}
	def apply(ps: PatternSpec): RC[T] = {
		val rc = getOrCreate(ps)
		rc
	}
}

registerFeature(overallPopularity)

def score(ids: Array[Long]) = {
	ids.map(overallPopularity)
}


def frac[T](x: RC[T], predicate: T => Boolean): Double = {
	Count(x.filter(predicate))().toDouble / Count(b)().toDouble
}

val frac: ((x: RC[T], predicate)) => Double = defFn {
	val a = ct(predicate)
	val b = ct(predicate)
	Count(x.filter(predicate))().toDouble / Count(b)().toDouble	
}


class RC[T] {
	def filter(p: T => Boolean): RC = {
		new FilteredRC(this, p)
	}
}

class FilteredRC[T] extends RC[T] (parent: RC[T], predicate: T=>Boolean) {
	def call(event: T) {
		if (predicate(event)) {
			callOnRegistered(event) // calls on all registered
		}
	}
}

// library
def count[T](x: Collection[T]) = t.size

class Count[T] (parent: RC[T]) extends RCallable {
	var ct = 0
	parent.register(this)
	def call(event: T) {
		ct += 1
	}
	def apply() = ct
}

object Count {
	private def getOrCreate(c: RC) = {
		map lookup else newCount(c)
	}
	def apply(c: RC) = {
		val c = getOrCreate(c)
		c
	}
}



// term popularity
addFeature termPopularity {  $id =>
	getTerms($ctx.queryStr).map(term => frac(ProductView(getTerms(query).contains(term)), _.skuSelected == $id)).product
// alternatives
//	getTerms($ctx.queryStr).map(term => frac(ProductView(query containsToken term), _.skuSelected == $id)).product
//	getTerms($ctx.queryStr).map(term => frac(ProductView(instr(query, term), _.skuSelected == $id)).product
}

// naive bayes
addFeature naiveBayes { $id =>
	termPopularity($id) * overallPopularity($id)
}

(id: Int) => { id*id }

addFeature tfIdfFeature { $id => 
	getTerms($ctx.query).map { term =>
		latestActiveProducts = set(latest ProductUpdate unique on sku).filter(_.active)
		val tf = count (getTerms(latestActiveProducts.filter(id = sku).name).filter(_==term))
		val df = count (lastestActiveProducts.filter(p => getTerms(p.name).contains(term)))
		val n = count (latestActiveProducts)
		sqrt(tf) * sq(1 + log (n / 1 + df))
	}	
}

// rank and score
val activeProductIds = set(latest ProductUpdate unique on sku).map(_.id)
def topN(query: String, weights: Array[Double]) = {
	activeProductIds.map(id => (id, features.map(f => f.score(id)) zipWith(weights).map(_*_).sum )).topN
}


// evaluate
addEmitter(pv: ProductView) {
	print topN(pv.query) contains pv.skuSelected
}

// generate training data
addEmitter(pv: ProductView) {
	List((pv.skuSelected, 1), (activeProductIds.random, 0)).map(x => (x,features.map(_.score(id._1))))
}



		val tf = count occurrences of term in (latest ProductUpdate(sku = $id)).name
		val tf = count occurrences of term in (latest ProductUpdate(sku = $id)).name
		val df = set(latest ProductUpdate unique on sku).filter(p=> p.active && getTerms(p.name).contains(term)).size
		val n = set(latest ProductUpdate unique on sku).filter(_.active).size


addFeature($id => frac(MessageEvent(sender=$id, in last 7 days), is_response))

with recentmsg as (
	select * from messages m
	where ts between now()-interval '7' days and now()
	and m.sender_id = $id)
select 
	(select count(*) from recentmsg) / 
	(select sum(least(ct,1)) from (select rm.message_id, count(*) ct from messages m join recentmsg rm where
			m.sender = rm.recipient and
			m.recipient = rm.sender
			and m.ts > rm.ts - interval '24' hour and m.ts < rm.ts
			group by rm.message_id))



select count(*), count(case when )
from (
	select * from messages m
	where ts between now()-interval '7' days and now()
	and m.sender_id = $id) X
join (
	select ct > 0 from (
		select count(*) from messages m where
			m.sender = checkMsg.recipient and
			m.recipient = checkMsg.sender
			and ts > checkMsg.ts - interval '24' hour and ts < ...)
			) Y on 

addFeature($id, frac(MessageEvent($id), is_response))

def_feature recent_response_sent_frac {
	def apply(m: MessageEvent) = {
		val t = interval(m.t-"24 hours", m.t)
		count(message_response(sender=m.sender_id), t) / count(message(sender=m.sender_id), t)
	}
}


def_feature recent_response_sent_frac {
	val all_sent = windowed_counter(m: MessageEvent => m.sender, "24 hours")
	val response_sent = windowed_counter(m: MessageEvent => is_message_response(m) ? Some(m.sender) : None, "24 hours")
	def apply(m: MessageEvent) = {
		val t = interval(m.t-"24 hours", m.t)
		count(message_response(sender=m.sender_id), t) / count(message(sender=m.sender_id), t)
	}
}


def_feature recent_response_sent_frac {
	val all_sent = windowed_counter(m: MessageEvent => m.sender, "24 hours")
	val response_sent = windowed_counter(m: MessageEvent => is_message_response(m) ? Some(m.sender) : None, "24 hours")
	def apply(m: MessageEvent) = {
		response_sent(m.sender_id) / all_sent(m.sender_id)
	}
}

when
	mrc: message_response_counter(sender = a)
	mr: message_response(message.sender = a)
then
	update mrc set ct = ct + 1

